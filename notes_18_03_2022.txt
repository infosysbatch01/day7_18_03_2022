public class Numbers{
  
  private void add(int a,int b){}
  private int add(int a,int b){}
}
// We have different return type in the above example
// We don't consider return type to decide whether two or methods
// are overloaded methods or not
public class Numbers{
  
  private void add(int a,int b){}
  private int add(float a,float b){}
}// The above example is of method overloading.
public class Numbers{
  
  private void add(int a,int b){}
  private int add(int a,int b,int c){}
}// The above example is of method overloading. 

public class Numbers{
  
  private void add(int a,float b){}
  private int add(float a,int b){}
}// The above example is of method overloading.
--------------------------------------------------------------------------------------------------
String substring(int startIndex)
String substring(int startIndex, int endIndex)
------------------------------------------------------------------------------------------------------
Whenever we are discussing dynamic polymorphism or method overriding we need to have Inheritance with the code.

 class Person{
    public void disp(){
    System.out.println("I am the disp method of the base class");
   }
 }

 class Employee extends Person {
  public void disp(){
    System.out.println("I am the disp method of the derived class");
   }
 }
For method overriding:
* methods will be having the same name in the Parent class and the Child class.
* Return type will be same or of covariant type.
* Number of parameters will be same.
* The parameter's datatype will be same.

public class Base1 {
   public int calculate(int a,int b){   // overridden method
    System.out.println("I am in the base class");
    return a+b;
   }
 }

public class Derived1 extends Base1 {
  public int calculate(int x, int y){     // overriding method
    System.out.println("I am the derived class");
    return x*y;
  }
}


public class Main1{
   public static void main(String args[]){
     Derived1 derived=new Derived1();
     int res=derived.calculate(4,5);
     // Derived class calculate method will override
     // the base class calculate
     System.out.println(res);
    }
  }
----------------------------------------------------------------------------------------------------
public class Base2 {
   private int calculate(int a,int b){   // private method/methods are not overridden
    System.out.println("I am in the base class");
    return a+b;
   }
 }

public class Derived2 extends Base2 {
  public int calculate(int x, int y){     
    System.out.println("I am the derived class");
    return x*y;
  }
}


public class Main2{
   public static void main(String args[]){
     Derived2 derived=new Derived2();
     int res=derived.calculate(4,5);
     System.out.println(res);
    }
  }
------------------------------------------------------------------------------
The access modifiers from most restricted to least restricted
private======>default=======>protected=======>public
When we go for method overriding the overridden method should have access specifier same as
that of the overridden method or with more scope than the overridden method. The
below code will show compilation error because the overridden method is having public scope
where as overriding os having the restricted scope of default.
public class Base3 {
   public int calculate(int a,int b){   // private method/methods are not overridden
    System.out.println("I am in the base class");
    return a+b;
   }
 }

public class Derived3 extends Base3 {
   int calculate(int x, int y){     
    System.out.println("I am the derived class");
    return x*y;
  }
}
--------------------------------------------------------------------
The below code is fine as the overriding method is having higher scope of accessibility as 
comparison to the overridden method.


public class Base4 {
    int calculate(int a,int b){   // private method/methods are not overridden
    System.out.println("I am in the base class");
    return a+b;
   }
 }

public class Derived4 extends Base4 {
   public int calculate(int x, int y){     
    System.out.println("I am the derived class");
    return x*y;
  }
}


public class Main4{
   public static void main(String args[]){
     Derived4 derived=new Derived4();
     int res=derived.calculate(4,5);
     System.out.println(res);
    }
  }
----------------------------------------------------------------------------

public class Base5 {
    int calculate(int a,int b){   // private method/methods are not overridden
    System.out.println("I am in the base class");
    return a+b;
   }
 }

public class Derived5 extends Base5 {
   public int calculate(int x, int y){     
    System.out.println("I am the derived class");
    return x*y;
  }
}


public class Main5{
   public static void main(String args[]){
     Base5 base=new Base5();
     int res=base.calculate(4,5);   // The base class calculate method is called
     Derived5 derived=new Derived5();
     res=derived.calculate(4,5);    // The derived class calculate method is called
     System.out.println(res);
     Base5 base2=new Derived5(); // Reference is of the base type and object is of the derived type
     res=base2.calculate(10,10);   //In this line the Derived class calculate method is called
     System.out.println(res);   
    }
  }
-------------------------------------------------------------
Q How the type conversion and casting takes place in Java for reference type?
A The classes which are having parent child relationship , with those classes we can implement type
conversion and type casting.Type casting cannot happen between the classes which are not related with
parent child relationship.

   public class Computer{

   }

   public class Laptop extends Computer {

   }

   public class ComputerMain{
     public static void main(String args[]){
       Computer computer=null;
       computer=new Laptop();  // The Computer and Laptop are having parent child relationship
     }
  }

-----------------------------------------------------------------------------------

public class Computer{

   }

   public class Laptop extends Computer {

   }

   public class ComputerMain{
     public static void main(String args[]){
       Computer computer=null; // we are initialising the reference variable with null which means currently the reference variable is not storing the address of any object.
       computer=new Laptop();  // The Computer and Laptop are having parent child relationship
     }
  }
----------------------------------------------------------------------------------------------------
public class Computer1{
    public void processing(){
     System.out.println("Computer will do processing");
    }
   }

   public class Laptop1 extends Computer1 {
   public void processing(){
     System.out.println("I am the Laptop processor");
    }
   }

   public class ComputerMain1{
     public static void main(String args[]){
       Computer1 computer=null; // we are initialising the reference variable with null which means currently the reference variable is not storing the address of any object.
       computer=new Laptop1();  // The Computer and Laptop are having parent child relationship
       computer.processing(); // It shows I am Laptop processor
       // The above execution is because of dynamic polymorphism because object is created during the
      // runtime and when we call processing method after the object creation, first it checks whether
      // we have processing method in the base class, if the method declaration is present in the
      // base class, then it checks the derived class as the object is of Derived type. Now if it
     // is getting the method in the derived class, that derived class method is invoked.
     }
  }

Q What will happen if we have a method in the base class but we dont have a similar method in the 
  Derived class.
A In that case the base class method will be called.

public class Computer2{
    public void processing(){
     System.out.println("Computer will do processing");
    }
   }

   public class Laptop2 extends Computer2 {
  
   }

   public class ComputerMain2{
     public static void main(String args[]){
       Computer2 computer=null; // we are initialising the reference variable with null which means currently the reference variable is not storing the address of any object.
       computer=new Laptop2();  // The Computer and Laptop are having parent child relationship
       computer.processing(); // Computer will do processing
       // The above execution is because of dynamic polymorphism because object is created during the
      // runtime and when we call processing method after the object creation, first it checks whether
      // we have processing method in the base class, if the method declaration is present in the
      // base class, then it checks the derived class as the object is of Derived type. Now if it
     // is getting the method in the derived class, that derived class method is invoked.
     }
  }
---------------------------------------------------------------------------------------------------
Q If we have a method which is only in the subclass but we dont have a method in the base class.
Can we call that method with the reference of base class and object of derived class?
A No

public class Computer3{
   
   }

   public class Laptop3 extends Computer3 {
     public void processing(){
     System.out.println("I am the processor of laptop");
    }
   }

   public class ComputerMain3{
     public static void main(String args[]){
       Computer3 computer=null; // we are initialising the reference variable with null which means currently the reference variable is not storing the address of any object.
       computer=new Laptop3();  // The Computer and Laptop are having parent child relationship
       computer.processing();   // In this line we will have compilation error as the method is 
      // not declared in the Parent class
     }
  }
-----------------------------------------------------------------------------
Q Do we have any solution for the above challenge?
A Yes . With type casting.

public class Computer4{
   
   }

   public class Laptop4 extends Computer4 {
     public void processing(){
     System.out.println("I am the processor of laptop");
    }
   }

   public class ComputerMain4{
     public static void main(String args[]){
       Computer4 computer=null; // we are initialising the reference variable with null which means currently the reference variable is not storing the address of any object.
       computer=new Laptop4();  // The Computer and Laptop are having parent child relationship
       Laptop4 laptop=(Laptop)computer; // Casting
       //((Laptop)computer).processing(); 
      laptop.processing();   
     }
  }

[In reference type casting is always preceeded by type conversion]
It is similar to pouring the content of smaller jug into the bigger jug and again pouring the 
content from bigger jug back to the smaller jug.
-------------------------------------------------------------------------------------
// For the following code we wont be getting any compilation error but we will get Runtime error
Exception in thread "main" java.lang.ClassCastException: class Computer5 cannot be cast to class Laptop5 (Computer5 and Laptop5 are in unnamed module of loader 'app')
	at ComputerMain5.main(ComputerMain5.java:4)

To decide type conversion we have to check is relation. Example
Laptop is a Computer        Computer=Laptop ( conversion) 
Is a relationship from down to up.
public class Computer5{
   
   }

   public class Laptop5 extends Computer5 {
     public void processing(){
     System.out.println("I am the processor of laptop");
    }
   }

   public class ComputerMain5{
     public static void main(String args[]){
       Computer5 computer=new Computer5();
       Laptop5 laptop=(Laptop5)computer; 
       laptop.processing();   
     }
  }
---------------------------------------------
Computer computer=new Computer();
Computer computer2=computer;
---------------------------------------------------------------------------------------

public class Base6 {
   public void disp(){
    System.out.println("I am the base class display method");
   }
}

public class Derived6 extends Base6{
  public void disp() {
    super.disp(); // super is a keyword which is used to represent the immediate parent class
    System.out.println("I am the derived class display method");
   }
}

public class Main6{
   public static void main(String args[]) {
      Derived6 derived=new Derived6();
      derived.disp();
   }
 }
-----------------------------------

  public class BaseA {
    public void disp(){
   
    }
  }
 
 public class BaseB extends BaseA {
   public void disp(){
   super.disp();
  }
}

  public class Derived extends BaseB {
   public void disp() {
   super.super.disp();  // This way is not correct
   super.disp();
  }
 }
-----------------------------------------------------------------------------------------
All the classes in Java ( Pre defined or user defined ) are subclasses of Object class.
So when we create our own class , that is also inherited class. In the following example
though we are not writing Employee extends Object, then also Employee is a subclass of Object.
  
  public class Employee {}
---------------------------------------------------------------------------------------------
  public class Person {}
  public class Employee extends Person{}
  
   Object
     |
     |
     |
   Person
     |
     |
     |
  Employee
As we dont have the concept of multiple inheritance but we have multi level inheritance. The
above example is of multi level inheritance. So in the example above Person is extending Object
and Employee is extending Person. So Employee is inheriting Object via Person class.
   A    B
     C
public class A{}
public class B{}
public class C extends A,B {}  // we cannot have multiple inheritance in Java through classes.
---------------------------------------------------------------------------------------------
We have 8 Wrapper classes. String is not a wrapper class.
Primitive          Wrapper Classes
char               Character
byte               Byte
short              Short
int                Integer
float              Float
double             Double
boolean            Boolean
---------------------------------------------------------------------------------------------------

  public class Employee1{

    private int id;
    private String name;
    private String desig;
    private float basic;

    public Employee1(int id, String name, String desig, float basic){
     this.id=id;
     this.name=name;
     this.desig=desig;
     this.basic=basic;
    }
 }

 public class EmployeeMain1{
    public static void main(String args[]) {
       Employee1 emp1=new Employee1(1,"Ratish","Manager",34000);
       Employee1 emp2=new Employee1(1,"Ratish","Manager",34000);
       Employee1 emp3=new Employee1(2,"Javed","Manager",35000);
       String str1="Hello";
       String str2="Hello";
       System.out.println(str1.equals(str2)); // true
       System.out.println(str1==str2); // true because str1 and str2 are pointing to the same String literal
       String str3=new String("Hello");
       String str4=new String("Hello");
       System.out.println(str3.equals(str4)); // true
       System.out.println(str3==str4);    // false
       System.out.println(emp1.equals(emp2)); // false because the equals method is inherited from 
       // the Object class and equals method of the object class compares the reference and not the
       // equality of the contenf
       System.out.println(emp1==emp2); // false
       System.out.println(emp1.hashCode()); // hashCode is a method which returns a number returned by 
       // the JVM for unique identification of the object it is related to the address of the object        //created
       System.out.println(emp2.hashCode());
      // As the objects are different so hash value of the objects are also different but according
      // to the specification if two objects are having the same content hashCode value should be 
      // same.
       System.out.println(emp1.toString());  //className@hexadecimal representation of the hashCode value
       System.out.println(emp2.toString());
       System.out.println(emp1);
       System.out.println(emp2);
     }
  }
 ---------------------------------------------------------------------------------------------
public class Employee2{

    private int id;
    private String name;
    private String desig;
    private float basic;

    public Employee2(int id, String name, String desig, float basic){
     this.id=id;
     this.name=name;
     this.desig=desig;
     this.basic=basic;
     
    }

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + Float.floatToIntBits(basic);
		result = prime * result + ((desig == null) ? 0 : desig.hashCode());
		result = prime * result + id;
		result = prime * result + ((name == null) ? 0 : name.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Employee2 other = (Employee2) obj;
		if (Float.floatToIntBits(basic) != Float.floatToIntBits(other.basic))
			return false;
		if (desig == null) {
			if (other.desig != null)
				return false;
		} else if (!desig.equals(other.desig))
			return false;
		if (id != other.id)
			return false;
		if (name == null) {
			if (other.name != null)
				return false;
		} else if (!name.equals(other.name))
			return false;
		return true;
	}

	@Override
	public String toString() {
		//return "Employee2 [id=" + id + ", name=" + name + ", desig=" + desig + ", basic=" + basic + "]";
	     return "ID : "+id+"NAME :"+name+"DESIG :"+desig+"BASIC :"+basic;
	}
	
	
 }

 public class EmployeeMain2{
    public static void main(String args[]) {
       Employee2 emp1=new Employee2(1,"Ratish","Manager",34000);
       Employee2 emp2=new Employee2(1,"Ratish","Manager",34000);
       Employee2 emp3=new Employee2(2,"Javed","Manager",35000);
       String str1="Hello";
       String str2="Hello";
       System.out.println(str1.equals(str2)); // true
       System.out.println(str1==str2); // true because str1 and str2 are pointing to the same String literal
       String str3=new String("Hello");
       String str4=new String("Hello");
       System.out.println(str3.equals(str4)); // true
       System.out.println(str3==str4);    // false
       System.out.println(emp1.equals(emp2)); // true because the equals method we have
       // overridden in the Employee class and these overridden method is checking for the content
       // as the content of emp1 and emp2 are same, it is returning true
       System.out.println(emp1==emp2); // false
       System.out.println(emp1.hashCode()); // hashCode is a method which returns a number returned by 
       // the JVM for unique identification of the object it is related to the address of the object        //created
       System.out.println(emp2.hashCode());
      // As the objects are different so hash value of the objects are also different but according
      // to the specification if two objects are having the same content hashCode value should be 
      // same.After overriding the hashCode method we are getting the same hashCode value 
       // for the objects which are having the same data
       System.out.println(emp1.toString());  //className@hexadecimal representation of the hashCode value
       System.out.println(emp2.toString());
       System.out.println(emp1); // If we are not overriding the toString method, this shows the classname@haxadecimal value for hashCode
       System.out.println(emp2);
       System.out.println(emp3);
     }
  }
 
 -------------------------------------------------------------------------------------------
POINTS TO REMEMBER related to hashcode:
* The hashcode of two object are different as it includes memory address to generate the hashcode
  value.
* It is said that if two objects are having same content, hashcode values will be same for both the
  objects. In java to implement this , we have override the hashCode method in our class.
* If the hashcode is same , it is not guaranteed that the objects will be same.
-------------------------------------------------------------------------------------------------- 

class Tester {

	public static void main(String[] args) {

		// Comparison of Integer objects
		Integer x = 5;
		Integer y = new Integer(5); // int data converted to Integer object
		System.out.println("x == y: " + (x == y));
		System.out.println("x.equals(y): " + x.equals(y));

		// Wrap the primitive content into wrapper class objects
		Integer number = Integer.valueOf(x);
		System.out.println("Wrapping x to its Integer: " + number);
		System.out.println("Check if number is of type Integer: "
				+ (number instanceof Integer));

		// Wrappers can be used to convert numeric strings to numeric datatypes
		String numStr = "123";
		int numInt = Integer.parseInt(numStr);
		System.out.println("String to integer: " + numInt);

		String doubleStr = "123.45";
		double numDouble = Double.parseDouble(doubleStr);
		System.out.println("String to double: " + numDouble);

		// Type casting cannot be used to convert any wrapper type to another,
		// it will give compilation error
		/* Uncomment the below code and observe the output*/
		// Long phoneNoLong = (Long) new Integer(44281234); 

		// We can make use of methods like intValue(), byteValue(),
		// floatValue(), etc. for conversion
		Integer phoneNo = 44281234;
		// longValue() converts the Integer value to long data type
		Long phoneNoLong = phoneNo.longValue(); 
		System.out.println("Integer to Long: " + phoneNoLong);

		// Converts the Integer object to binary value
		System.out.println("Integer 5 as binary string: "
				+ Integer.toBinaryString(5));
	}
}

--------------------------------------------------------

public class WrapperDemo1 {
   public static void main(String args[]) {
     String str1="123";
     String str2="456";
     System.out.println(str1+str2);  //123456
     }
  }
public class WrapperDemo2 {
   public static void main(String args[]) {
     String str1="123";
     int num1=Integer.parseInt(str1);  //parseInt is a static method and it is converting from string to primitive int
     String str2="456";
     int num2=Integer.parseInt(str2);
     System.out.println(num1+num2);  
     }
  }
------------------------------------------------------------------------------------------------------


 public class ReviseStatic1 {
   int roll;
   String name;
   public static void main(String args[]){
        System.out.println(roll);
        System.out.println(name);
   }
  }

  1) It will show the output as 0 and null
  2) IT will show compilation error
[Compilation error because main is static and we are trying to access non static instance variables]

 public class ReviseStatic2 {
   int roll;
   String name;
   public static void main(String args[]){
         ReviseStatic2 rs=new ReviseStatic2();
        System.out.println(rs.roll);
        System.out.println(rs.name);
   }
  }
  1) It will show the output as 0 and null
  2) IT will show compilation error
[Output will 0 and null

 public class ReviseStatic3 {
   int roll;
   String name;
   static int cname;
   public static void main(String args[]){
        ReviseStatic3 rs=new ReviseStatic3();
        System.out.println(rs.roll);
        System.out.println(rs.name);
        System.out.println(cname);// The main and static cname are in the same class , so cname can be access without the class name or object in static method main
        System.out.println(ReviseStatic3.cname);  //static can be accessed with the Classname
        System.out.println(rs.cname);  // static can be accessed with the object also
   }
  }
   
1) It will show the output
2) Compilation error

  public class Data1 {
   int roll;
   String name;
   static int cname;
   }

 public class ReviseStatic4 {
  
   public static void main(String args[]){
        Data1 data=new Data1();
        System.out.println(data.roll);
        System.out.println(data.name);
        System.out.println(cname);  // cname is in Data1 so we cannot access it without the classname
        System.out.println(Data1.cname);  
        System.out.println(data.cname);  
  }


 public class ReviseStatic5 {
    public static int add(int a,int b){
   return a+b;
   }

   public static void main(String args[]){
    System.out.println(add(4,5));
    //System.out.println(ReviseStatic5.add(3,3));  // This way of writing is not required as they are in same class          
  }
1) The output will be shown
2) The compilation error


 public class ReviseStatic5 {
  private int a;
  private int b;  
  public static int add(int a,int b){
   return a+b;
   }
  
  public int add(){
   return a+b;
  }

   public static void main(String args[]){
    System.out.println(add(4,5));
    System.out.println(add());  // non static method cannot be accessed within a static method without having the object of the class       
  }




 public class ReviseStatic6 {
  private int a;
  private int b;  
  public static int add(int a,int b){
   return a+b;
   }
  
  public int add(){
   return a+b;
  }

   public static void main(String args[]){
    System.out.println(add(4,5));  //9

    ReviseStatic6 rs=new ReviseStatic6();
    System.out.println(rs.add());  //0     
  }
What will be the output

 public class ReviseStatic7 {
  private int a;
  private int b;  
  public static int add(int a,int b){
      this.a=a;
      this.b=b;
     return this.a+this.b;
   }
  
  public int add(){
   return a+b;
  }

   public static void main(String args[]){
    System.out.println(add(4,5));  

    ReviseStatic7 rs=new ReviseStatic7();
    System.out.println(rs.add());    
  }
-----------------

 public class ReviseStatic8 {
  private int a;
  private int b;  
  public int add(int a,int b){
      this.a=a;
      this.b=b;
     return this.a+this.b;
   }
  
  public int add(){
   return a+b;
  }

   public static void main(String args[]){
    eviseStatic8 rs=new ReviseStatic8();
    System.out.println(rs.add(4,5));   //9
    System.out.println(rs.add());      //9


  }
---------------------------------------------------------------------------
public class ReviseStatic9 {
  private int a;
  private int b;  
  public int add(int aa,int bb){
     int a=aa;
     int b=bb;
     return a+b;
   }
  
  public int add(){
   return a+b;
  }

   public static void main(String args[]){
    eviseStatic9 rs=new ReviseStatic9();
    System.out.println(rs.add(4,5));   //9
    System.out.println(rs.add());      //0 
    }

  }
public class ReviseStatic10 {
  private int a;
  private int b;  
  public int add(int a,int b){
     int a=a;
     int b=b;    // parameters are local and the variable declared within
                 // method are also local . We cannot have same name in the same scope
     return a+b;
   }
  
  public int add(){
   return a+b;
  }

   public static void main(String args[]){
    eviseStatic10 rs=new ReviseStatic10();
    System.out.println(rs.add(4,5));   
    System.out.println(rs.add());      
    }

  }
--------------------------------------------------------------------------------

   public class FinalVariableDemo1 {
    private final int a;
   
    public void disp() {
    System.out.println(a);
    }
  }

  public class FinalVariableDemoMain1{
   public static void main(String args[]) {
     FinalVariableDemo1 fvd=new FinalVariableDemo1();
     fvd.disp();
   }
 }
[ The above code will show compilation error because we have not initialised the final variable] 

  public class FinalVariableDemo2 {
    private final int a=10;
   
    public void disp() {
    System.out.println(a);
    }
  }

  public class FinalVariableDemoMain2{
   public static void main(String args[]) {
     FinalVariableDemo2 fvd=new FinalVariableDemo2();
     fvd.disp();
   }
 }
-------------------------------------------------------------------
   // Either we initialise at the the place of declaration or within the constructor
public class FinalVariableDemo3 {
    private final int a;
   
    public FinalVariableDemo3(){
     a=10;
    }
   
    public void disp() {
    System.out.println(a);
    }
  }

  public class FinalVariableDemoMain3{
   public static void main(String args[]) {
     FinalVariableDemo3 fvd=new FinalVariableDemo3();
     fvd.disp();
   }
 }

------------------------------------------------------------------------

public class FinalVariableDemo4 {
    private final int a;
   
    public FinalVariableDemo4(){
     a=10;
    }
   
    public void disp() {
    a=11;  // final variable cannot be reinitialised
    System.out.println(a);
    }
  }

  public class FinalVariableDemoMain4{
   public static void main(String args[]) {
     FinalVariableDemo4 fvd=new FinalVariableDemo4();
     fvd.disp();
   }
 }

----------------------------------------------------------------------------------------------
// Final method cannot be overridden
class A {
	final public void example() {
		System.out.println("A Class Method");
	}
}

class B extends A {
	@Override
	public void example() {
		System.out.println("B Class Method");
	}

}

class Tester {
	public static void main(String[] args) {
		B obj = new B();
		obj.example();
	}

}
--------------------------------
// We cannot inherit a final class
final class A {
}

class B extends A {
	void demo() {
		System.out.println("In class B");
	}
}

class Tester {
	public static void main(String args[]) {
		B obj = new B();
		obj.demo();
	}
}
---------------------------------------------
The classes like String and Wrapper classes are final classes.
---------------------------------------------------------------------------------
A method without a body is called as an abstract method.
A class containing atleast one abstract method needs to be declared as an
abstract class.
A subclass which is extending/inheriting the abstract needs to implement the
abstract method.
abstract keyword is used only with method and class. It is not used with the variables.
We cannot create an object of abstract class. That means if my abstract class is Base.
We cannot write
     Base base=new Base(); 
The reason is abstract clas is incomplete it is having some methods
without a body. So if we are allowed to create an object of abstract
class, there will be a challenge in executing the abstract method(
because abstract method don't have a body to execute)

   Example:

   abstract public class Base {
   
       abstract public void abstractDemo();
       
        public void display(){
        System.out.println("Hello from abstract class method");
       }    
 
   } 


   public class Derived extends Base {
     // So implementation of the abstract method is mandatory in the subclass
      public void abstractDemo(){
       System.out.println("I am the implementation of the abstract method in the subclass");
     }
    // The subclass can have its own method which is not present in the base class   
     public void derivedDisplay(){
      System.out.println("I am the display method of the Derived class");
     }
    }

    public class AbstractMain{
     public static void main(String args[]){
       Base base=new Derived();
       base.abstractDemo();
       base.display();
       //base.derivedDisplay();  // derivedDisplay() we dont have derivedDisplay in the Base class.
       Derived derived=(Derived)base;
       derived.derivedDisplay();
     }
  }
-----------------------------
 abstract public class Base1 {
   
       abstract public void abstractDemo();
       
        public void display(){
        System.out.println("Hello from abstract class method");
       }    
 
   } 
// If we are not implementing the abstract method in the derived class
// make the derived class as an abstract class so that to convey that
// derived class is also incomplete. 
// That means derived also needs to be implemented. 

   abstract public class Derived1 extends Base1 {
     // So implementation of the abstract method is mandatory in the subclass
      
    // The subclass can have its own method which is not present in the base class   
     public void derivedDisplay(){
      System.out.println("I am the display method of the Derived class");
     }
    }

    public class AbstractMain1{
     public static void main(String args[]){
       
     }
  }

----------
// A class without an abstract method can be declared as an abstract class
abstract public class Base1 {
       
       
        public void display(){
        System.out.println("Hello from abstract class method");
       }    
 
   } 
----------------------------------